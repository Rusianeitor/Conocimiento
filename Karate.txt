KARATE

Código de respuesta:
200 - get - obtener respuesta exitosa
201 - post - crear
204 - delete - eliminar
200 - put - actualizar
301 - redirección permanente
303 - redirección temporal
404 - error
403 - recurso sin autorización
500 - error de servidor

Mapear paths: https://jsonpath.com
$.name - Busca nombre

https://github.com/karatelabs/karate
https://github.com/karatelabs/karate#fuzzy-matching

Pasos Gradle:
#https://www.cleveritgroup.com/blog/api-testing-con-karatedsl
1. Ingresar al archivo build.gradle para configurar
2. Crear el package en la carpeta test
3. Crear karate-config.js por ambiente
	Definir los timeout de conección y lectura
	Definir la url y usuario
4. Crear logback-test para limpiar la consola
5. Crear el feature
	Definir el background (url, path, params y definir variables para json)
6. Crear el runner
	Definir el feature que ejecutará
	Tiene que tener el mismo nombre del feature
	Tiene que tener el mismo nivel de carpeta
7. Crear los archivos .json para comparar
	Definir los campos opcionales
8. Ejecutar desde cmd las variables en otros ambientes
	Ejecutar gradle test --tests ParallelTests -Dkarate.env=preproductive -Duser=karate -DBaseUrl=http://api.geonames.org/ -i

./gradlew test --tests ParallelTests -Denv=preproductive -Duser=karate -DbaseUrl=http://api.geonames.org/ -i

Pasos Maven: https://github.com/karatelabs/karate?tab=readme-ov-file#maven
1. Ingresar al pom.xml para configurar
	Agregar dependencias junit
	Agregar test resource de folder structure
	Agregar plugin maven-surefire
2. Crear archivo Runner en el package Test
	@Karate.Test
    Karate karateTest() {
        return Karate.run("classpath:{nombreFeature}.feature");
    }
3. Crear archivo logback.test.xml
	Extraer data de la sección Login de Karate
3. Crear feature
	Background:
     * url 'https://reqres.in/api'

	Scenario: Obteniendo un usuario
     * path 'users/2'
     When method GET
     Then status 200
     And match response.data.email == 'janet.weaver@reqres.in'

  	Scenario: Creando un usuario
     * path 'users'
     When request {"name": "morpheus","job": "leader"}
	 When request
     """
      {
        "name": "morpheus",
        "job": "leader"
      }
     """
     And method POST
     Then status 201
4. Parametrizar datos
  Desde json
  {
    "name": '#(vName)',
    "job": "#(vJob)"
  }
5. Ejecutar features
  Ejecución desde consola
  mvn -test //testea las dependencias de maven
   mvn clean test -Dtest=SuperRunner //clean hace limpieza y luego con test descarga
  